From ed7bf9c23a3501f20cb593635b9bf2cf876b6e5b Mon Sep 17 00:00:00 2001
From: Mattias Busck <mattias.busck@hostmobility.com>
Date: Thu, 23 Mar 2023 15:23:04 +0100
Subject: [PATCH] HMX:Add suspend to backported m_can driver

v1. Requires an ip link set canX down; ip link set canX up toggle to get
traffic after sleep
v2. Since the HMX has one wakeup-line for all the CAN controllers, we
need to make the wakeup gpio line global. TODO: clean this up
---
 drivers/net/can/m_can/m_can.c         |  2 +-
 drivers/net/can/m_can/tcan4x5x-core.c | 81 +++++++++++++++++++++++++--
 2 files changed, 76 insertions(+), 7 deletions(-)

diff --git a/drivers/net/can/m_can/m_can.c b/drivers/net/can/m_can/m_can.c
index d7bb65fe1266..bc00029a4839 100644
--- a/drivers/net/can/m_can/m_can.c
+++ b/drivers/net/can/m_can/m_can.c
@@ -2036,7 +2036,7 @@ int m_can_class_register(struct m_can_classdev *cdev)
 
 	of_can_transceiver(cdev->net);
 
-	dev_info(cdev->dev, "%s canfix device registered (irq=%d, version=%d)\n",
+	dev_info(cdev->dev, "%s canfix3 device registered (irq=%d, version=%d)\n",
 		 KBUILD_MODNAME, cdev->net->irq, cdev->version);
 
 	/* Probe finished
diff --git a/drivers/net/can/m_can/tcan4x5x-core.c b/drivers/net/can/m_can/tcan4x5x-core.c
index 9677562f3725..02b46386c5a4 100644
--- a/drivers/net/can/m_can/tcan4x5x-core.c
+++ b/drivers/net/can/m_can/tcan4x5x-core.c
@@ -253,20 +253,30 @@ static int tcan4x5x_disable_state(struct m_can_classdev *cdev)
 				  TCAN4X5X_DISABLE_INH_MSK, 0x01);
 }
 
+static struct gpio_desc *global_device_wake_gpio = NULL;
+
 static int tcan4x5x_get_gpios(struct m_can_classdev *cdev)
 {
 	struct tcan4x5x_priv *tcan4x5x = cdev_to_priv(cdev);
 	int ret;
 
-	tcan4x5x->device_wake_gpio = devm_gpiod_get(cdev->dev, "device-wake",
+
+	if (!global_device_wake_gpio) {
+		global_device_wake_gpio = devm_gpiod_get(cdev->dev, "device-wake",
 						    GPIOD_OUT_HIGH);
-	if (IS_ERR(tcan4x5x->device_wake_gpio)) {
-		if (PTR_ERR(tcan4x5x->device_wake_gpio) == -EPROBE_DEFER)
+		dev_warn(cdev->dev, "global_device_wake_gpio=%pB\n", global_device_wake_gpio);
+	}
+
+	if (IS_ERR(global_device_wake_gpio)) {
+		if (PTR_ERR(global_device_wake_gpio) == -EPROBE_DEFER)
 			return -EPROBE_DEFER;
 
-		tcan4x5x_disable_wake(cdev);
+		global_device_wake_gpio = NULL;
+		//dev_warn(cdev->dev, "disabling wake\n");
+		//tcan4x5x_disable_wake(cdev);
 	}
 
+
 	tcan4x5x->reset_gpio = devm_gpiod_get_optional(cdev->dev, "reset",
 						       GPIOD_OUT_LOW);
 	if (IS_ERR(tcan4x5x->reset_gpio))
@@ -368,7 +378,7 @@ static int tcan4x5x_can_probe(struct spi_device *spi)
 	if (ret)
 		goto out_power;
 
-	netdev_info(mcan_class->net, "canfix TCAN4X5X successfully initialized.\n");
+	netdev_info(mcan_class->net, "canfix3 TCAN4X5X successfully initialized.\n");
 	return 0;
 
 out_power:
@@ -409,11 +419,70 @@ static const struct spi_device_id tcan4x5x_id_table[] = {
 };
 MODULE_DEVICE_TABLE(spi, tcan4x5x_id_table);
 
+static int __maybe_unused tcan4x5x_suspend(struct device *dev)
+{
+	int ret;
+	struct spi_device *spi = to_spi_device(dev);
+	struct tcan4x5x_priv *priv = spi_get_drvdata(spi);
+	struct net_device *net = (priv->cdev).net;
+
+	
+
+	disable_irq(spi->irq);
+	/* Note: at this point neither IST nor workqueues are running.
+	 * open/stop cannot be called anyway so locking is not needed
+	 */
+	if (netif_running(net)) {
+		dev_err(dev, "Disabled irq Entering sleep(%d), enabling wake on 0x%x\n", ret, spi->irq);
+		m_can_class_suspend(dev);
+		ret = regmap_update_bits(priv->regmap, TCAN4X5X_CONFIG,
+				 TCAN4X5X_MODE_SEL_MASK, TCAN4X5X_MODE_SLEEP);
+		enable_irq_wake(spi->irq);
+		//tcan4x5x_hw_sleep(spi);
+		//netif_stop_queue(net);
+		//netif_device_detach(net);
+	} else {
+		dev_err(dev, "Entering suspend, interface is down, no wake\n");
+		m_can_class_suspend(dev);
+	}
+
+
+	return 0;
+}
+
+static int __maybe_unused tcan4x5x_resume(struct device *dev)
+{
+	int ret;
+	struct spi_device *spi = to_spi_device(dev);
+	struct tcan4x5x_priv *priv = spi_get_drvdata(spi);
+	struct net_device *net = (priv->cdev).net;
+
+
+	if (global_device_wake_gpio) {
+		dev_err(dev, "RESUME WAKE UP using %pB \n", global_device_wake_gpio);
+		gpiod_set_value(global_device_wake_gpio, 0);
+		usleep_range(5000, 50000);
+		gpiod_set_value(global_device_wake_gpio, 1);
+	} else {
+		dev_err(dev, "NO WaKE UP DEFINED %pB \n", global_device_wake_gpio);
+	}
+	
+	
+	ret = regmap_update_bits(priv->regmap, TCAN4X5X_CONFIG,
+				 TCAN4X5X_MODE_SEL_MASK, TCAN4X5X_MODE_NORMAL);
+
+	m_can_class_resume(dev);
+	return 0;
+}
+
+static SIMPLE_DEV_PM_OPS(tcan4x5x_pm_ops, tcan4x5x_suspend,
+	tcan4x5x_resume);
+
 static struct spi_driver tcan4x5x_can_driver = {
 	.driver = {
 		.name = KBUILD_MODNAME,
 		.of_match_table = tcan4x5x_of_match,
-		.pm = NULL,
+		.pm = &tcan4x5x_pm_ops,
 	},
 	.id_table = tcan4x5x_id_table,
 	.probe = tcan4x5x_can_probe,
-- 
2.30.2

