From 8b5cbd10ae1087a09b71d20d6fdb8f4d5d98eaed Mon Sep 17 00:00:00 2001
From: rikardo <rikard.olander@hostmobility.com>
Date: Tue, 3 Oct 2023 14:53:35 +0000
Subject: [PATCH 1/1] gpio-pca953x: fix return and driver minimize error print out
  Return all failures as ret variable in resume. 

---
 drivers/gpio/gpio-pca953x.c | 38 ++++++++++++++++++++++++-------------
 1 file changed, 25 insertions(+), 13 deletions(-)

diff --git a/drivers/gpio/gpio-pca953x.c b/drivers/gpio/gpio-pca953x.c
index 5d64a02ff9af..3b85bb9b3ffd 100644
--- a/drivers/gpio/gpio-pca953x.c
+++ b/drivers/gpio/gpio-pca953x.c
@@ -482,6 +482,8 @@ static u8 pcal6534_recalc_addr(struct pca953x_chip *chip, int reg, int off)
 	return pinctrl + addr + (off / BANK_SZ);
 }
 
+/* HACK: We don't want the chip to send many error messages when the HMX unit goes to super cap mode (shutdown with no power to the board) */
+static int error_count = 0;
 static int pca953x_write_regs(struct pca953x_chip *chip, int reg, unsigned long *val)
 {
 	u8 regaddr = chip->recalc_addr(chip, reg, 0);
@@ -493,10 +495,14 @@ static int pca953x_write_regs(struct pca953x_chip *chip, int reg, unsigned long
 
 	ret = regmap_bulk_write(chip->regmap, regaddr, value, NBANK(chip));
 	if (ret < 0) {
-		dev_err(&chip->client->dev, "failed writing register\n");
-		return ret;
+		if (error_count == 0) {
+			error_count = 1;
+			dev_err(&chip->client->dev, "failed writing register\n");error_count =1;
+			return ret;
+		}
+		error_count = (error_count + 1) % 100; // wrapping around at 100
+		usleep_range(25000, 30000); // add a delay to minimize spam of faulty write
 	}
-
 	return 0;
 }
 
@@ -507,9 +513,15 @@ static int pca953x_read_regs(struct pca953x_chip *chip, int reg, unsigned long *
 	int i, ret;
 
 	ret = regmap_bulk_read(chip->regmap, regaddr, value, NBANK(chip));
-	if (ret < 0) {
-		dev_err(&chip->client->dev, "failed reading register\n");
-		return ret;
+	if (ret < 0) {	
+		if (error_count == 0) {
+			error_count = 1;
+			dev_err(&chip->client->dev, "failed reading register\n");error_count =1;
+			return ret;
+		}
+		error_count = (error_count + 1) % 100; // wrapping around at 100
+		usleep_range(25000, 30000); // add a delay to minimize spam of faulty reads
+		return 0;
 	}
 
 	for (i = 0; i < NBANK(chip); i++)
@@ -1306,10 +1318,12 @@ static int pca953x_resume(struct device *dev)
 	int ret;
 
 	if (!atomic_read(&chip->wakeup_path)) {
-		ret = regulator_enable(chip->regulator);
-		if (ret) {
-			dev_err(dev, "Failed to enable regulator: %d\n", ret);
-			return 0;
+		if (chip->regulator) {
+			ret = regulator_enable(chip->regulator);
+			if (ret) {
+				dev_err(dev, "Failed to enable regulator: %d\n", ret);
+				return ret;
+			}
 		}
 	}
 
@@ -1329,7 +1343,7 @@ static int pca953x_resume(struct device *dev)
 		return ret;
 	}
 
-	return 0;
+	return ret;
 }
 #endif
 
@@ -1393,9 +1407,7 @@ static SIMPLE_DEV_PM_OPS(pca953x_pm_ops, pca953x_suspend, pca953x_resume);
 static struct i2c_driver pca953x_driver = {
 	.driver = {
 		.name	= "pca953x",
-#if 0
 		.pm	= &pca953x_pm_ops,
-#endif
 		.of_match_table = pca953x_dt_ids,
 		.acpi_match_table = pca953x_acpi_ids,
 	},
-- 
2.34.1

