# SPDX-License-Identifier: GPL-2.0+ OR MIT
#
# Copyright 2020 Toradex
#
# Toradex boot script.
#
# Setek Systems AB
# Customized flash mmc with wic.gz. the reset is based on the kirkstone version of this script.
#
# Allows to change boot and rootfs devices independently.
# Supports:
# - boot device type: boot_devtype := {mmc, usb, tftp, dhcp}
# - boot device num (for mmc, usb types): boot_devnum := {0 .. MAX_DEV_NUM}
# - boot partition (for mmc, usb types): boot_part := {1 .. MAX_PART_NUM}
# - root device type: root_devtype := {mmc, usb, nfs-dhcp, nfs-static}
# - root device num (for mmc, usb types): root_devnum := {0 .. MAX_DEV_NUM}
# - root partition (for mmc, usb types): root_part := {1 .. MAX_PART_NUM}
#
# Defaults:
#    root_devtype = boot_devtype = devtype
#    root_devnum = boot_devnum = devnum
#    boot_part = distro_bootpart
#    root_part = 2
#
# Common variables used in tftp/dhcp modes:
# - Static/dynamic IP mode: ip_dyn := {yes, no}
# - Static IP-address of TFTP/NFS server: serverip := {legal IPv4 address}
# - Static IP-address of the module: ipaddr := {legal IPv4 address}
# - Root-path on NFS-server: rootpath := {legal path, exported by an NFS-server}
#

if test ${devtype} = "ubi"; then
    echo "This script is not meant to distro boot from raw NAND flash."
    exit
fi

test -n ${m4boot} || echo "no m4boot, set default for testing..." && env set m4boot 'if ext4size mmc ${root_devnum}:${root_part} ${m4_firmware}; then load mmc ${root_devnum}:${root_part} ${m4addr} ${m4_firmware}; if rproc init && rproc load 0 ${m4addr} ${filesize} && rproc start 0; then echo INFO: M4 firmware ${m4_firmware} successfully started; else echo ERROR: Failed to initialize or start M4 firmware; env set script_warning 'M4 firmware ${m4_firmware} initialization/start failed'; fi; else echo WARNING: File ${m4_firmware} not found on mmc ${root_devnum}:${root_part}, continue booting; env set script_warning 'File ${m4_firmware} not found on mmc ${root_devnum}:${root_part}, continue booting'; fi;'
test -n ${fdtfile} || env set fdtfile ${fdt_file}
test -n ${boot_part} || env set boot_part ${distro_bootpart}
test -n ${root_part} || env set root_part 2
test -n ${boot_devnum} || env set boot_devnum ${devnum}
test -n ${root_devnum} || env set root_devnum ${devnum}
test -n ${kernel_image} || env set kernel_image @@KERNEL_IMAGETYPE@@
test -n ${boot_devtype} || env set boot_devtype ${devtype}
test -n ${wic_file} || env set wic_file 'hmm-image.wic.gz'

echo "wic_file:${wic_file}"

env set loadimage "load mmc ${root_devnum}:${root_part} ${ramdisk_addr_r} ${prefix}${wic_file}"
env set writeimage "gzwrite mmc ${root_devnum} ${ramdisk_addr_r} 0x${filesize} 100000 0"

test ${boot_devtype} = "mmc" && env set load_cmd 'load ${boot_devtype} ${boot_devnum}:${boot_part}'
test ${boot_devtype} = "usb" && env set load_cmd 'load ${boot_devtype} ${boot_devnum}:${boot_part}'
test ${boot_devtype} = "tftp" && env set load_cmd 'tftp'
test ${boot_devtype} = "dhcp" && env set load_cmd 'dhcp'

# Set Root source type properly.
# devtype tftp => nfs-static
# devtype ghcp => nfs-dhcp
if test "${root_devtype}" = ""; then
    if test ${devtype} = "tftp"; then
        env set root_devtype "nfs-static"
    else
        if test ${devtype} = "dhcp"; then
            env set root_devtype "nfs-dhcp"
        else
            env set root_devtype ${devtype}
        fi
    fi
fi

if test -n ${setup}; then
    run setup
else
    env set setupargs console=tty1 console=${console},${baudrate} consoleblank=0
fi

if test ${kernel_image} = "fitImage"; then
    env set kernel_addr_load ${ramdisk_addr_r}
    env set bootcmd_unzip ';'
else
    if test -n ${kernel_comp_addr_r}; then
        # use booti automatic decompression
        env set kernel_addr_load ${loadaddr}
        env set bootcmd_unzip ';'
    else
        if test ${kernel_image} = "Image.gz"; then
            env set kernel_addr_load ${loadaddr}
            env set bootcmd_unzip 'unzip ${kernel_addr_load} ${kernel_addr_r}'
        else
            env set kernel_addr_load ${kernel_addr_r}
            env set bootcmd_unzip ';'
        fi
    fi
fi

# Set dynamic commands
env set set_bootcmd_kernel 'env set bootcmd_kernel "${load_cmd} \\${kernel_addr_load} \\${kernel_image}"'

if test ${kernel_image} = "fitImage"
then
    env set fdt_high
    env set fdt_resize true
    env set set_bootcmd_dtb 'env set bootcmd_dtb "true"'
    env set bootcmd_boot 'echo "Bootargs: \${bootargs}" && bootm ${kernel_addr_load}#conf-@@KERNEL_DTB_PREFIX@@\${fdtfile}'
else
    env set fdt_resize 'fdt addr ${fdt_addr_r} && fdt resize 0x20000'
    env set set_bootcmd_dtb 'env set bootcmd_dtb "echo Loading DeviceTree: \\${fdtfile}; ${load_cmd} \\${fdt_addr_r} \\${fdtfile}"'
    env set bootcmd_boot 'echo "Bootargs: \${bootargs}" && @@KERNEL_BOOTCMD@@ ${kernel_addr_r} - ${fdt_addr_r}'
fi

# Set static commands
if test ${root_devtype} = "nfs-dhcp"; then
    env set rootfsargs_set 'env set rootfsargs "root=/dev/nfs ip=dhcp"'
else
    if test ${root_devtype} = "nfs-static"; then
        env set rootfsargs_set 'env set rootfsargs "root=/dev/nfs nfsroot=${serverip}:/${rootpath}"'
    else
        env set uuid_set 'part uuid ${root_devtype} ${root_devnum}:${root_part} uuid'
        env set rootfsargs_set 'run uuid_set && env set rootfsargs root=PARTUUID=${uuid} ro rootwait'
    fi
fi

env set bootcmd_args 'run rootfsargs_set && env set bootargs ${defargs} ${rootfsargs} ${setupargs} ${vidargs} ${tdxargs}'

env set bootcmd_prepare 'run set_bootcmd_kernel; run set_bootcmd_dtb'
env set bootcmd_run 'run m4boot; run bootcmd_dtb && run bootcmd_args && run bootcmd_kernel && run bootcmd_unzip && run bootcmd_boot; echo "Booting from ${devtype} failed!" && false'

#Try Flash target mmc
    for prefix in ${boot_prefixes}; do
        #Check if wic image exist on multiple places if not continue normal run.
        if ext4size mmc ${root_devnum}:${root_part} ${prefix}${wic_file}; then \
            echo Loading ${wic_file} from ${prefix} on mmc ${root_devnum}:${root_part};
            if run loadimage; then
                echo Extracting ${wic_file} to mmc ${root_devnum}:${root_part};
                if run writeimage; then
                    reset;
                else
                    echo write failed, aborting;
                    sleep 10;
                    #reset; TODO what to do if writeimage file failes here....
                fi
            fi
            else
                echo "Did not found any ${prefix}${wic_file} file."
        fi
    done

run bootcmd_prepare
run bootcmd_run