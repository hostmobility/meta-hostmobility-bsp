From db22888e32d715fdafe82aa094a223d62cf63180 Mon Sep 17 00:00:00 2001
From: Mattias Busck <mattias.busck@hostmobility.com>
Date: Wed, 12 Apr 2023 18:00:05 +0200
Subject: [PATCH 26/27] HMX: m_can do not init registers until bus-on

Initlializing registers before bus-on results in error-frames
---
 drivers/net/can/m_can/m_can.c         | 11 +++++--
 drivers/net/can/m_can/tcan4x5x-core.c | 45 +++++++++++++++++++++++----
 2 files changed, 47 insertions(+), 9 deletions(-)

diff --git a/drivers/net/can/m_can/m_can.c b/drivers/net/can/m_can/m_can.c
index a7c27fb6dd37..c0b47708e8fe 100644
--- a/drivers/net/can/m_can/m_can.c
+++ b/drivers/net/can/m_can/m_can.c
@@ -1524,6 +1524,7 @@ static int m_can_dev_setup(struct m_can_classdev *cdev)
 		CAN_CTRLMODE_ONE_SHOT;
 
 	/* Set properties depending on M_CAN version */
+	dev_err(cdev->dev, "set properties for cdev-version %d", cdev->version);
 	switch (cdev->version) {
 	case 30:
 		/* CAN_CTRLMODE_FD_NON_ISO is fixed with M_CAN IP v3.0.x */
@@ -1543,9 +1544,11 @@ static int m_can_dev_setup(struct m_can_classdev *cdev)
 		cdev->can.bittiming_const = &m_can_bittiming_const_31X;
 		cdev->can.data_bittiming_const = &m_can_data_bittiming_const_31X;
 
+		/*
 		cdev->can.ctrlmode_supported |=
 			(m_can_niso_supported(cdev) ?
 			 CAN_CTRLMODE_FD_NON_ISO : 0);
+			 */
 		break;
 	default:
 		dev_err(cdev->dev, "Unsupported version number: %2d",
@@ -1553,8 +1556,10 @@ static int m_can_dev_setup(struct m_can_classdev *cdev)
 		return -EINVAL;
 	}
 
-	if (cdev->ops->init)
-		cdev->ops->init(cdev);
+	
+	dev_err(cdev->dev, "NISO!: %2d", 45);
+	//TODO dev_setupt should not init if (cdev->ops->init)
+//		cdev->ops->init(cdev);
 
 	return 0;
 }
@@ -2038,7 +2043,7 @@ int m_can_class_register(struct m_can_classdev *cdev)
 
 	of_can_transceiver(cdev->net);
 
-	dev_info(cdev->dev, "%s canfix3 device registered (irq=%d, version=%d)\n",
+	dev_info(cdev->dev, "%s  Keep interrupts enabled + Write transmit header and data in one transaction  device registered (irq=%d, version=%d)\n",
 		 KBUILD_MODNAME, cdev->net->irq, cdev->version);
 
 	/* Probe finished
diff --git a/drivers/net/can/m_can/tcan4x5x-core.c b/drivers/net/can/m_can/tcan4x5x-core.c
index 02b46386c5a4..2620e06c2389 100644
--- a/drivers/net/can/m_can/tcan4x5x-core.c
+++ b/drivers/net/can/m_can/tcan4x5x-core.c
@@ -124,6 +124,7 @@ static void tcan4x5x_check_wake(struct tcan4x5x_priv *priv)
 static int tcan4x5x_reset(struct tcan4x5x_priv *priv)
 {
 	int ret = 0;
+	//return 0;
 
 	if (priv->reset_gpio) {
 		gpiod_set_value(priv->reset_gpio, 1);
@@ -132,13 +133,15 @@ static int tcan4x5x_reset(struct tcan4x5x_priv *priv)
 		usleep_range(30, 100);
 		gpiod_set_value(priv->reset_gpio, 0);
 	} else {
+	usleep_range(40000, 41000);
+		dev_err(priv->cdev.dev, "SOFTWARE RESETS\n");
 		ret = regmap_write(priv->regmap, TCAN4X5X_CONFIG,
 				   TCAN4X5X_SW_RESET);
 		if (ret)
 			return ret;
 	}
 
-	usleep_range(700, 1000);
+	usleep_range(40000, 41000);
 
 	return ret;
 }
@@ -164,6 +167,7 @@ static int tcan4x5x_read_fifo(struct m_can_classdev *cdev, int addr_offset,
 static int tcan4x5x_write_reg(struct m_can_classdev *cdev, int reg, int val)
 {
 	struct tcan4x5x_priv *priv = cdev_to_priv(cdev);
+	//dev_err(cdev->dev, "writing mcan reg 0x%x(0x%x) ras 0x%x\n", reg, reg + TCAN4X5X_MCAN_OFFSET, val);
 
 	return regmap_write(priv->regmap, TCAN4X5X_MCAN_OFFSET + reg, val);
 }
@@ -192,6 +196,7 @@ static int tcan4x5x_write_tcan_reg(struct m_can_classdev *cdev,
 {
 	struct tcan4x5x_priv *priv = cdev_to_priv(cdev);
 
+	//dev_err(cdev->dev, "writing tcan reg 0x%x ras 0x%x\n", reg, val);
 	return regmap_write(priv->regmap, reg, val);
 }
 
@@ -370,15 +375,16 @@ static int tcan4x5x_can_probe(struct spi_device *spi)
 	if (ret)
 		goto out_power;
 
-	ret = tcan4x5x_init(mcan_class);
-	if (ret)
-		goto out_power;
+
+	//TODO probe shall not calll init ret = tcan4x5x_init(mcan_class);
+	//if (ret)
+//		goto out_power;
 
 	ret = m_can_class_register(mcan_class);
 	if (ret)
 		goto out_power;
 
-	netdev_info(mcan_class->net, "canfix3 TCAN4X5X successfully initialized.\n");
+	netdev_info(mcan_class->net, "poweroff TCAN4X5X successfully initialized.\n");
 	return 0;
 
 out_power:
@@ -443,6 +449,8 @@ static int __maybe_unused tcan4x5x_suspend(struct device *dev)
 		//netif_device_detach(net);
 	} else {
 		dev_err(dev, "Entering suspend, interface is down, no wake\n");
+		ret = regmap_update_bits(priv->regmap, TCAN4X5X_CONFIG,
+				 TCAN4X5X_MODE_SEL_MASK, TCAN4X5X_MODE_SLEEP);
 		m_can_class_suspend(dev);
 	}
 
@@ -455,7 +463,7 @@ static int __maybe_unused tcan4x5x_resume(struct device *dev)
 	int ret;
 	struct spi_device *spi = to_spi_device(dev);
 	struct tcan4x5x_priv *priv = spi_get_drvdata(spi);
-	struct net_device *net = (priv->cdev).net;
+	//unstruct net_device *net = (priv->cdev).net;
 
 
 	if (global_device_wake_gpio) {
@@ -475,8 +483,32 @@ static int __maybe_unused tcan4x5x_resume(struct device *dev)
 	return 0;
 }
 
+static int __maybe_unused tcan4x5x_poweroff(struct device *dev)
+{
+	int ret;
+	struct spi_device *spi = to_spi_device(dev);
+	struct tcan4x5x_priv *priv = spi_get_drvdata(spi);
+	struct net_device *net = (priv->cdev).net;
+
+	
+
+	disable_irq(spi->irq);
+	ret = regmap_update_bits(priv->regmap, TCAN4X5X_CONFIG,
+				 TCAN4X5X_MODE_SEL_MASK, TCAN4X5X_MODE_SLEEP);
+
+	return 0;
+}
+
+/*
 static SIMPLE_DEV_PM_OPS(tcan4x5x_pm_ops, tcan4x5x_suspend,
 	tcan4x5x_resume);
+	*/
+
+static struct dev_pm_ops tcan4x5x_pm_ops = {
+	.suspend = tcan4x5x_suspend,
+	.resume = tcan4x5x_resume,
+	.poweroff = tcan4x5x_poweroff
+};
 
 static struct spi_driver tcan4x5x_can_driver = {
 	.driver = {
@@ -488,6 +520,7 @@ static struct spi_driver tcan4x5x_can_driver = {
 	.probe = tcan4x5x_can_probe,
 	.remove = tcan4x5x_can_remove,
 };
+
 module_spi_driver(tcan4x5x_can_driver);
 
 MODULE_AUTHOR("Dan Murphy <dmurphy@ti.com>");
-- 
2.30.2

