From 307ba6b0c867fd063d4b3208d6f25b7558c4e606 Mon Sep 17 00:00:00 2001
From: Rikardo-hm <rikard.olander@hostmobility.com>
Date: Mon, 3 Feb 2025 13:58:33 +0000
Subject: [PATCH 1/1] Add suspend to tcan4x5x driver adapt to kernel 6.6

---
 drivers/net/can/m_can/tcan4x5x-core.c | 92 ++++++++++++++++++++++++++-
 1 file changed, 91 insertions(+), 1 deletion(-)

diff --git a/drivers/net/can/m_can/tcan4x5x-core.c b/drivers/net/can/m_can/tcan4x5x-core.c
index ae8c42f5debd..bee3f5af367c 100644
--- a/drivers/net/can/m_can/tcan4x5x-core.c
+++ b/drivers/net/can/m_can/tcan4x5x-core.c
@@ -366,6 +366,87 @@ static struct m_can_ops tcan4x5x_ops = {
 	.clear_interrupts = tcan4x5x_clear_interrupts,
 };
 
+ssize_t tcan4x5x_mode_store(struct device *dev,
+						   struct device_attribute *attr,
+						   const char *buf,
+						   size_t count)
+{
+	int ret;
+	char mode[15];
+	struct tcan4x5x_priv *tcan4x5x = dev_get_drvdata(dev);
+
+	strncpy(mode, buf, count -1);
+
+	if (!strncmp(buf, "normal", count - 1)) {
+		ret = regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
+				 TCAN4X5X_MODE_SEL_MASK, TCAN4X5X_MODE_NORMAL);
+		if (ret) {
+			dev_err(dev, "Cannot set operation mode to normal\n");
+			return ret;
+		}
+		dev_dbg(dev, "Switched to normal mode\n");
+	} else if (!strncmp(buf, "sleep", count - 1)) {
+		ret = regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
+				 TCAN4X5X_MODE_SEL_MASK, TCAN4X5X_MODE_SLEEP);
+		if (ret) {
+			dev_err(dev, "Cannot set operation mode to sleep\n");
+			return ret;
+		}
+		dev_dbg(dev, "Switch to normal sleep\n");
+	} else if (!strncmp(buf, "standby", count - 1)) {
+		ret = regmap_update_bits(tcan4x5x->regmap, TCAN4X5X_CONFIG,
+				 TCAN4X5X_MODE_SEL_MASK, TCAN4X5X_MODE_STANDBY);
+		if (ret) {
+			dev_err(dev, "Cannot set operation mode to standby\n");
+			return ret;
+		}
+		dev_dbg(dev, "Switch to normal standby\n");
+	} else {
+		dev_err(dev, "Unsupported mode\n");
+		return -EINVAL;
+	}
+
+	return count;
+}
+
+ssize_t tcan4x5x_mode_show(struct device *dev,
+						  struct device_attribute *attr,
+						  char *buf)
+{
+	unsigned int mode;
+	int ret;
+	struct tcan4x5x_priv *tcan4x5x = dev_get_drvdata(dev);
+
+	ret = regmap_read(tcan4x5x->regmap, TCAN4X5X_CONFIG, &mode);	
+	if (ret < 0) {
+		dev_err(dev, "Can't read mode ctrl register\n");
+		return -EBUSY;
+	}
+
+	switch (mode & TCAN4X5X_MODE_SEL_MASK) {
+	case TCAN4X5X_MODE_STANDBY:
+		return sprintf(buf, "normal sleep [standby]\n");
+	case TCAN4X5X_MODE_SLEEP:
+		return sprintf(buf, "normal [sleep] standby\n");
+	case TCAN4X5X_MODE_NORMAL:
+		return sprintf(buf, "[normal] sleep standby\n");
+	}
+
+	
+	return sprintf(buf, "Unsupported Operation mode\n");
+}
+
+static DEVICE_ATTR(tcan4x5x_mode, S_IWUSR | S_IRUGO, tcan4x5x_mode_show, tcan4x5x_mode_store);
+
+static struct attribute *tcan4x5x_attributes[] = {
+	&dev_attr_tcan4x5x_mode.attr,
+	NULL
+};
+
+static const struct attribute_group tcan4x5x_attr_group = {
+	.attrs = tcan4x5x_attributes,
+};
+
 static int tcan4x5x_can_probe(struct spi_device *spi)
 {
 	const struct tcan4x5x_version_info *version_info;
@@ -408,6 +489,13 @@ static int tcan4x5x_can_probe(struct spi_device *spi)
 		goto out_m_can_class_free_dev;
 	}
 
+	/* Create attributes for sleep control */
+	ret = sysfs_create_group(&(spi->dev.kobj), &tcan4x5x_attr_group);
+	if (ret) {
+		dev_err(&spi->dev, "Can't create sysfs entries\n");
+		goto out_m_can_class_free_dev;
+	}
+
 	priv->spi = spi;
 
 	mcan_class->pm_clock_support = 0;
@@ -466,7 +554,7 @@ static int tcan4x5x_can_probe(struct spi_device *spi)
 		goto out_power;
 	}
 
-	netdev_info(mcan_class->net, "TCAN4X5X successfully initialized.\n");
+	netdev_info(mcan_class->net, "Testing Normal TCAN4X5X successfully initialized.\n");
 	return 0;
 
 out_power:
@@ -480,6 +568,8 @@ static void tcan4x5x_can_remove(struct spi_device *spi)
 {
 	struct tcan4x5x_priv *priv = spi_get_drvdata(spi);
 
+	sysfs_remove_group(&(spi->dev.kobj), &tcan4x5x_attr_group);
+
 	m_can_class_unregister(&priv->cdev);
 
 	tcan4x5x_power_enable(priv->power, 0);
-- 
2.25.1

